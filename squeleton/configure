#!/bin/bash
set -e

### Read arguments ###

OPTS="$(getopt -n "$0" \
-l srcdir: \
-l build: \
-l prefix: \
-l enable-debug \
-l help \
-o h- \
-- "$@" \
|| true)"

eval set -- $OPTS

while [ "$1" != "" ]; do
    case "$1" in
        --srcdir) SRCDIR="`readlink -f "$2"`"; shift 2;;
        --build) BUILDTYPE="$2"; shift 2;;
        --prefix) PREFIX="$2"; shift 2;;
        --enable-debug) DEBUG=true; shift 1;;

        -h|--help) usage $0; exit 0;;
        --) shift; break;;
        *) echo "configure: error reading arguments" >&2; exit 1;;
    esac
done

if [ "$1" != "" ]; then
    BUILDTYPE="$1"
    shift
fi

if [ "$*" != "" ]; then
    echo 'configure: error: trailing arguments:' "'$*'" >&2
    exit 1
fi


### Other variables and default values ###

if [ "$SRCDIR" == "" ]; then SRCDIR="`pwd`"; fi

. "$SRCDIR"/Config/utils.sh

SRCDIR="$(fullpath $SRCDIR)"
show SRCDIR


if [ "$BUILDTYPE" == "" ]; then
    BUILDTYPE="`config.guess`"
else
    BUILDTYPE="`config.sub "$BUILDTYPE"`"
fi
show BUILDTYPE

default PREFIX /usr/local
show PREFIX

default DEBUG false
show DEBUG

PKGS=
show PKGS

BUILDDIR="$(fullpath .)"/Build/"$BUILDTYPE"
if $DEBUG; then BUILDDIR="$BUILDDIR"_debug; fi
show BUILDDIR

GENERATED="(generated by configure on `date`)"

### Prepare build environment ###

mkdir -p "$BUILDDIR"
cd "$BUILDDIR"
echo Changing directory to $BUILDDIR

mkdir -p include

rm "$SRCDIR"/Build/current || true 2>/dev/null
ln -s "$BUILDDIR" "$SRCDIR"/Build/current

cat > config.status <<EOF
# Configure status file $GENERATED
rm $(q $SRCDIR)/Build/current 2>&1
ln -s $(q $SRCDIR)/Build/current $(q $BUILDDIR)
EOF
echo . config.status

cat > config.mk <<EOF
# Build configuration file $GENERATED"
BUILDDIR = $BUILDDIR
SRCDIR = $SRCDIR
PREFIX = $PREFIX
BUILDTYPE = $BUILDTYPE
COPTS += -I"$BUILDDIR"/include/
EOF
if $DEBUG; then echo COPTS += -g >> config.mk; fi
cat "$SRCDIR"/Config/config.mk.tail >> config.mk
echo . config.mk

cat > include/config.h <<EOF
/* Build configuration file $GENERATED */
EOF
echo . include/config.h

cat > Makefile.source <<EOF
# Makefile for compiling in the source directory $GENERATED
.SUFFIXES :
.PHONY: _build
_build:
	@\$(MAKE) -C "$BUILDDIR"/\$(DIR) \$(MAKECMDGOALS)
%:: _build
	@echo -n
EOF
echo . Makefile.source

cd "$SRCDIR"
find . -name rules.mk | while read RULES; do
    DIR="`dirname "$RULES"`"
    SRCPATH="`echo $DIR | sed -r 's|^\./?$||;s|^\./||;s|[^/]+|..|g;s|\.$|./|'`"
    DIRS="`cd "$DIR"; for a in $(ls */rules.mk 2>/dev/null); do dirname $a; done`"
    cat > "$DIR"/Makefile <<EOF
# Makefile $GENERATED
DIR = $DIR
include ${SRCPATH}Build/current/Makefile.source
EOF
echo . "$SRCDIR"/"$DIR"/Makefile | sed 's|/./|/|'

    mkdir -p "$BUILDDIR"/"$DIR"
    cat > "$BUILDDIR"/"$DIR"/Makefile <<EOF
#Makefile $GENERATED
DIRS = $DIRS

include $BUILDDIR/config.mk
include $SRCDIR/$RULES

fallback_default:
	@echo NOTHING TO DO: no rules in $RULES

distclean::
	@rm -vf Makefile "\$(SRCDIR)"/"$DIR"/Makefile || true >/dev/null
EOF
echo . "$DIR"/Makefile | sed 's| ./| |'
done

cat >> "$BUILDDIR"/Makefile <<EOF
distclean :: clean
	@rm -vf config.status config.mk include/config.h Makefile.source || true 2>/dev/null
EOF

echo "Configured; run make to build."